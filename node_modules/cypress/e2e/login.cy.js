describe('Login Flow', () => {
  beforeEach(() => {
    cy.visit('/login');
  });

  it('logs in with valid credentials', () => {
    cy.get('[data-cy=username]').type('testuser');
    cy.get('[data-cy=password]').type('password123');
    cy.get('[data-cy=login-button]').click();
    cy.url().should('include', '/dashboard');
  });

  it('shows error with invalid credentials', () => {
    cy.get('[data-cy=username]').type('wrong');
    cy.get('[data-cy=password]').type('incorrect');
    cy.get('[data-cy=login-button]').click();
    cy.get('[data-cy=login-error]').should('exist');
  });
});

describe('Login API', () => {
  it('should return a 200 on successful login', () => {
    cy.request({
      method: 'POST',
      url: '/api/login', // relative to baseUrl
      body: {
        username: 'testuser',
        password: '123456',
      }
    }).then((response) => {
      expect(response.status).to.eq(200);
    });
  });
});

describe('API Tests', () => {
  it('should log in with valid credentials', () => {
    cy.request('POST', '/api/login', { username: 'user', password: 'pass' })
      .its('status').should('eq', 200);
  });

  it('should fail login with wrong credentials', () => {
    cy.request({
      method: 'POST',
      url: '/api/login',
      failOnStatusCode: false,
      body: { username: 'wrong', password: '123' }
    }).its('status').should('eq', 401);
  });

  // Repeat similarly for GET, POST, PUT, DELETE on /items
});

describe('Task API', () => {

   // READ tasks
  it('should fetch all tasks', () => {
    cy.request('GET', '/api/tasks').then((response) => {
      expect(response.status).to.eq(200);
      expect(response.body).to.be.an('array');
    });
  });

  // UPDATE a task
  it('should update a task by ID', () => {
    const updatedTask = {
      title: 'Finish Cypress CRUD setup',
      status: 'completed'
    };

    cy.request('PUT', '/api/tasks/1', updatedTask).then((response) => {
      expect(response.status).to.eq(200);
      expect(response.body.status).to.eq('completed');
    });
  });

  // CREATE a task
  it('should create a new task', () => {
    cy.request('POST', '/api/tasks', {
      title: 'Finish Cypress CRUD setup',
      status: 'pending'
    }).then((response) => {
      expect(response.status).to.eq(201);
      expect(response.body).to.have.property('id');
    });
  });

  // DELETE a task
  it('should delete a task by ID', () => {
    cy.request('DELETE', '/api/tasks/1').then((response) => {
      expect(response.status).to.eq(204); // or 200 depending on backend
    });
  });

});